@page "/"
@page "/index.html"
@inject IJSRuntime JsRuntime


@* /index.html is required for phones : to put url on home screen page *@

<div class="main">
    <div class="header">
        <button @onclick="onEndMatch" @ontouchend="onEndMatch">
            <span>End Match</span>
        </button>
        <button @onclick="onUndo" @ontouchend="onUndo">
            <span>Undo</span>
        </button>
    </div>
    <div class="left-player">
        <Team IsRight="false" Game="@game" Player="@game.Player1"></Team>
    </div>
    <div class="timer">
        <div class="globalScore">
            @for (int i = 0; i < game.Player1.Scores.Length; i++)
            {
                string s = $"{game.Player1.Scores[i]}/{game.Player2.Scores[i]}";
                <span>@s</span>
            }
        </div>
        <Scores Game="@game" DetailsPoints="@DetailsPoints"></Scores>
        @if (game.Status == GameStatus.NotStarted)
        {
            <button type="button" class="button brounded timercenter" @onclick="OnStartClick">
                <span>Start</span>
            </button>
        }
    </div>

    <div class="playingMessage">
        <span>@time</span>
        <span style="font-size: 2em;">@PlayerMessage</span>
    </div>

    <div class="right-player">
        <Team IsRight="true" Game="@game" Player="@game.Player2"></Team>
    </div>


    @if (IsLeft)
    {
        <div style="grid-area: mainfooter">
            <button class="servicebutton brounded" @onclick="SwitchServiceSide">@ServiceSide</button>
        </div>
    }
    else
    {
        <div style="grid-area: mainfooter;" class="right">
            <button class="servicebutton brounded" @onclick="SwitchServiceSide">@ServiceSide</button>
        </div>
    }

</div>

@code {

    private SquashGame game;
    private SquashGameUIWrapper eventWrapper = new SquashGameUIWrapper();
    private Tuple<int,int>[] DetailsPoints { get; set; } = Array.Empty<Tuple<int,int>>();
    
    bool IsLeft
    {
        get { return game.Server == PlayerEnum.PlayerOne; }
    }

    string ServiceSide
    {
        get
        {
            switch (game.ServiceSide)
            {
                case PlayerSideEnum.Left:
                    return "L";
                case PlayerSideEnum.Right:
                    return "R";
                default:
                    return "?";
            }
        }
    }

    string PlayerMessage { get; set; } = "Waiting to start";

    string time = string.Empty;

    protected override Task OnInitializedAsync()
    {
        game = new SquashGame(null);
        game.GameUICallBack = eventWrapper;
        eventWrapper.OnChooseToss += OnChooseToss;
        eventWrapper.OnChooseServeSide += OnChooseServeSide;
        eventWrapper.OnUpdateServiceSide += OnUpdateServiceSide;
        eventWrapper.OnUpdateTime += OnUpdateTime;
        eventWrapper.OnPlayerWinSet += OnPlayerWinSet;
        eventWrapper.OnPlayerWins += OnPlayerWins;
        eventWrapper.OnUpdateScore += OnUpdateScore;
        eventWrapper.OnUpdatePointDetails += OnUpdatePointDetails;
        return base.OnInitializedAsync();
    }

    private Task SwitchServiceSide()
    {
        game.switchServiceSide();
        return Task.CompletedTask;
    }

    private Task OnStartClick()
    {
        if (game.Status == GameStatus.NotStarted)
        {
            game.StartGame();
            StateHasChanged();
        }
        return Task.CompletedTask;
    }

    private void OnChooseToss(object? sender, EventArgs args)
    {
        PlayerMessage = "Select Server";
    }

    private void OnChooseServeSide(object? sender, EventArgs args)
    {
        PlayerMessage = string.Empty;
        game.SetPlayerServeOn(PlayerSideEnum.Right, true);
        StateHasChanged();
    }

    private void OnUpdateServiceSide(object? sender, EventArgs args)
    {
        StateHasChanged();
    }

    private void OnUpdateTime(object? sender, EventArgs args)
    {
        if (game.Status == GameStatus.Playing)
        {
            PlayerMessage = string.Empty;
        }
        time = game.DurationAsString();
        StateHasChanged();
    }

    private void OnPlayerWinSet(object? sender, PlayerEnum player)
    {
    // var s = $"{game.Player1.Scores.Last()}/{game.Player2.Scores.Last()}";
    // SetScores += "\r\n"+s;
    }

    private void OnPlayerWins(object? sender, PlayerEnum player)
    {
    }

    private void OnUpdateScore(object? sender, Tuple<int, int> value)
    {
        
    }
    
    private void OnUpdatePointDetails(object? sender, Tuple<int, int> value)
    {
        var l = new List<Tuple<int, int>>(DetailsPoints);
        
        l.Add(value);
        this.DetailsPoints = l.ToArray();
        //Console.WriteLine("coucou");
    }


    private async Task onEndMatch()
    {
        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure?");
        if (confirmed)
        {
            game.Reset();
        }
    }

    private Task onUndo()
    {
        game.Undo();
        return Task.CompletedTask;
    }

}